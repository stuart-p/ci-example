name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    needs: lint
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-node-${{ matrix.node-version }}
          path: api/coverage

  build-and-smoke:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    environment: PIPELINE
    env:
      PORT: ${{ vars.PORT }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set up environment variables
        run: echo "PORT=$PORT" >> .env

      - name: Build Docker image
        run: docker compose up -d --build

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready on port $PORT..."
          for i in {1..30}; do
            if curl -s http://localhost:$PORT; then
              echo "API is ready!"
              exit 0
            fi
            sleep 2
          done
          echo "API did not start in time!"
          exit 1

      - name: Run smoke tests
        run: curl -s http://localhost:$PORT/health || exit 1

      - name: Dump running containers
        if: failure()
        run: docker ps -a

      - name: View logs
        if: failure()
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=api")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "No running containers found."
          fi

      - name: Stop Docker containers
        if: always()
        run: docker compose down

  release:
    runs-on: ubuntu-latest
    needs: build-and-smoke
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Login to github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker compose build api

      - name: Tag image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/ci-example-api:${{ env.VERSION }}
          docker tag api:latest $IMAGE_NAME
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Push image
        run: docker push $IMAGE_NAME
